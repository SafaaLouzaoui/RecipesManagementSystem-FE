{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { of } from 'rxjs';\nimport { catchError, switchMap, tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"./personne.service\";\nexport class AuthService {\n  constructor(http, router, personneService) {\n    this.http = http;\n    this.router = router;\n    this.personneService = personneService;\n    this.baseUrl = 'http://localhost:8083';\n    this.token = localStorage.getItem('access_token');\n    this.headers = new HttpHeaders().set('Authorization', `Bearer ${this.token}`);\n    this.authUser = {};\n  }\n  login(user) {\n    return this.http.post(`${this.baseUrl}/api/v1/auth/authenticate`, user, {\n      responseType: 'arraybuffer'\n    }).pipe(tap(response => {\n      // Convert the ArrayBuffer to a string\n      const token = new TextDecoder().decode(response);\n      // Parse the received token as JSON\n      const tokenData = JSON.parse(token);\n      // Store the access token and refresh token in localStorage\n      localStorage.setItem('access_token', tokenData.access_token);\n      localStorage.setItem('refresh_token', tokenData.refresh_token);\n      localStorage.setItem('idAuth', tokenData.id);\n    }), catchError(err => {\n      console.error('Login failed', err);\n      return err; // Return the error for further handling if needed\n    }));\n  }\n\n  register(user) {\n    return this.http.post(`${this.baseUrl}/api/v1/auth/register`, user, {\n      responseType: 'arraybuffer'\n    }).pipe(tap(response => {\n      // Convert the ArrayBuffer to a string\n      const token = new TextDecoder().decode(response);\n      // Parse the received token as JSON\n      const tokenData = JSON.parse(token);\n      // Store the access token and refresh token in localStorage\n      localStorage.setItem('access_token', tokenData.access_token);\n      localStorage.setItem('refresh_token', tokenData.refresh_token);\n      localStorage.setItem('idAuth', tokenData.id);\n    }), catchError(err => {\n      console.error('Registration failed', err);\n      return err; // Return the error for further handling if needed\n    }));\n  }\n\n  logout() {\n    return this.http.post(`${this.baseUrl}/api/v1/auth/logout`, {\n      headers: this.headers\n    });\n  }\n  // logout() {\n  //   localStorage.removeItem('access_token');\n  //   localStorage.removeItem('refresh_token');\n  //   this.router.navigate(['/login']);\n  // }\n  refreshToken() {\n    // Implement token refresh logic using the refresh token\n    // Make a request to your server's refresh token endpoint\n    // and update tokens if the refresh is successful\n    // You should update storeTokens() method accordingly\n    // For example:\n    return this.http.post(`${this.baseUrl}/api/v1/auth/refresh-token`, {\n      refresh_token: localStorage.getItem('refresh_token')\n    }).pipe(tap(newTokens => {\n      this.storeTokens(newTokens);\n    }), catchError(err => {\n      console.error('Token refresh failed', err);\n      return err; // Return the error for further handling if needed\n    }));\n  }\n\n  storeTokens(tokens) {\n    localStorage.setItem('access_token', tokens.access_token);\n    localStorage.setItem('refresh_token', tokens.refresh_token);\n  }\n  isAuthenticated() {\n    const accessToken = localStorage.getItem('access_token');\n    return accessToken !== null; // Return true if there's an access token\n  }\n\n  getAuthenticatedUser() {\n    const id = Number(localStorage.getItem('idAuth'));\n    return this.personneService.showOnePerson(id);\n  }\n  isUserInRole(requiredRole) {\n    return this.getAuthenticatedUser().pipe(switchMap(user => {\n      const userRole = user?.role;\n      return of(userRole === requiredRole);\n    }), catchError(error => {\n      console.log(error);\n      return of(false);\n    }));\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.PersonneService));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["HttpHeaders","of","catchError","switchMap","tap","AuthService","constructor","http","router","personneService","baseUrl","token","localStorage","getItem","headers","set","authUser","login","user","post","responseType","pipe","response","TextDecoder","decode","tokenData","JSON","parse","setItem","access_token","refresh_token","id","err","console","error","register","logout","refreshToken","newTokens","storeTokens","tokens","isAuthenticated","accessToken","getAuthenticatedUser","Number","showOnePerson","isUserInRole","requiredRole","userRole","role","log","i0","ɵɵinject","i1","HttpClient","i2","Router","i3","PersonneService","factory","ɵfac","providedIn"],"sources":["D:\\a-Projects Dev\\PROJET STAGE\\RecipesManagementSystem-FE\\src\\app\\services\\auth.service.ts"],"sourcesContent":["import { PersonneService } from './personne.service';\r\nimport { Router } from '@angular/router';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError, switchMap, tap } from 'rxjs/operators';\r\nimport { Personne } from '../models/personne';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AuthService {\r\n  private baseUrl = 'http://localhost:8083';\r\n  private token = localStorage.getItem('access_token');\r\n  private headers = new HttpHeaders().set(\r\n    'Authorization',\r\n    `Bearer ${this.token}`\r\n  );\r\n  authUser: Personne = {};\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private router: Router,\r\n    private personneService: PersonneService\r\n  ) {}\r\n\r\n  login(user: Personne): Observable<any> {\r\n    return this.http\r\n      .post(`${this.baseUrl}/api/v1/auth/authenticate`, user, {\r\n        responseType: 'arraybuffer',\r\n      })\r\n      .pipe(\r\n        tap((response) => {\r\n          // Convert the ArrayBuffer to a string\r\n          const token = new TextDecoder().decode(response);\r\n\r\n          // Parse the received token as JSON\r\n          const tokenData = JSON.parse(token);\r\n\r\n          // Store the access token and refresh token in localStorage\r\n          localStorage.setItem('access_token', tokenData.access_token);\r\n          localStorage.setItem('refresh_token', tokenData.refresh_token);\r\n          localStorage.setItem('idAuth', tokenData.id);\r\n        }),\r\n        catchError((err) => {\r\n          console.error('Login failed', err);\r\n          return err; // Return the error for further handling if needed\r\n        })\r\n      );\r\n  }\r\n\r\n  register(user: Personne): Observable<any> {\r\n    return this.http\r\n      .post(`${this.baseUrl}/api/v1/auth/register`, user, {\r\n        responseType: 'arraybuffer',\r\n      })\r\n      .pipe(\r\n        tap((response) => {\r\n          // Convert the ArrayBuffer to a string\r\n          const token = new TextDecoder().decode(response);\r\n\r\n          // Parse the received token as JSON\r\n          const tokenData = JSON.parse(token);\r\n\r\n          // Store the access token and refresh token in localStorage\r\n          localStorage.setItem('access_token', tokenData.access_token);\r\n          localStorage.setItem('refresh_token', tokenData.refresh_token);\r\n          localStorage.setItem('idAuth', tokenData.id);\r\n        }),\r\n        catchError((err) => {\r\n          console.error('Registration failed', err);\r\n          return err; // Return the error for further handling if needed\r\n        })\r\n      );\r\n  }\r\n\r\n  logout(): Observable<any> {\r\n    return this.http.post(`${this.baseUrl}/api/v1/auth/logout`, {\r\n      headers: this.headers,\r\n    });\r\n  }\r\n\r\n  // logout() {\r\n  //   localStorage.removeItem('access_token');\r\n  //   localStorage.removeItem('refresh_token');\r\n  //   this.router.navigate(['/login']);\r\n  // }\r\n\r\n  refreshToken(): Observable<any> {\r\n    // Implement token refresh logic using the refresh token\r\n    // Make a request to your server's refresh token endpoint\r\n    // and update tokens if the refresh is successful\r\n    // You should update storeTokens() method accordingly\r\n\r\n    // For example:\r\n    return this.http\r\n      .post<any>(`${this.baseUrl}/api/v1/auth/refresh-token`, {\r\n        refresh_token: localStorage.getItem('refresh_token'),\r\n      })\r\n      .pipe(\r\n        tap((newTokens) => {\r\n          this.storeTokens(newTokens);\r\n        }),\r\n        catchError((err) => {\r\n          console.error('Token refresh failed', err);\r\n          return err; // Return the error for further handling if needed\r\n        })\r\n      );\r\n  }\r\n\r\n  private storeTokens(tokens: any): void {\r\n    localStorage.setItem('access_token', tokens.access_token);\r\n    localStorage.setItem('refresh_token', tokens.refresh_token);\r\n  }\r\n\r\n  isAuthenticated(): boolean {\r\n    const accessToken = localStorage.getItem('access_token');\r\n    return accessToken !== null; // Return true if there's an access token\r\n  }\r\n\r\n  getAuthenticatedUser(): Observable<Personne> {\r\n    const id = Number(localStorage.getItem('idAuth'));\r\n\r\n    return this.personneService.showOnePerson(id);\r\n  }\r\n\r\n  isUserInRole(requiredRole: string): Observable<boolean> {\r\n    return this.getAuthenticatedUser().pipe(\r\n      switchMap(user => {\r\n        const userRole = user?.role;\r\n        return of(userRole === requiredRole);\r\n      }),\r\n      catchError(error => {\r\n        console.log(error);\r\n        return of(false);\r\n      })\r\n    );\r\n  }\r\n\r\n\r\n\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}