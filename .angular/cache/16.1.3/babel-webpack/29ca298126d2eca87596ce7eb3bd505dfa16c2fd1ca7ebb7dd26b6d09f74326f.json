{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Commentaire } from './../models/commentaire';\nimport { Component } from '@angular/core';\nimport { HttpParams } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nexport let ViewRecetteComponent = class ViewRecetteComponent {\n  constructor(route, recetteService, router, http, personneService, commentaireService) {\n    this.route = route;\n    this.recetteService = recetteService;\n    this.router = router;\n    this.http = http;\n    this.personneService = personneService;\n    this.commentaireService = commentaireService;\n    this.recette = {};\n    this.slideIndex = 1;\n    //////slider\n    this.urlMedia = [];\n    this.imgCollection = [];\n    this.comment = '';\n    //////slider\n    // Commnet Recipe\n    this.commentaire = new Commentaire();\n    this.message = '';\n  }\n  ngOnInit() {\n    this.getRecette();\n    this.getCreateurRecette(this.recette.idCreateur);\n    this.calculateTimedifference();\n  }\n  scrollDown() {\n    const detailsSection = document.querySelector('#about');\n    detailsSection?.scrollIntoView({\n      behavior: 'smooth'\n    });\n  }\n  getRecette() {\n    const id = Number(this.route.snapshot.paramMap.get('id'));\n    this.recetteService.getRecetteById(id).subscribe(data => {\n      this.recette = data;\n      if (this.recette.medias) {\n        for (const media of this.recette.medias) {\n          const imageObject = {\n            image: `assets/images/${media.url}`,\n            thumbImage: `assets/images/${media.url}`,\n            alt: 'Image 1',\n            title: 'Image 1'\n          };\n          this.imgCollection.push(imageObject);\n        }\n      }\n      console.log(this.imgCollection);\n    }, error => {\n      console.log(error);\n    });\n    console.log(this.recette.commentaires);\n  }\n  CommentRecipe(recetteId) {\n    let bodyData = {\n      message: this.message,\n      recette: {\n        id: recetteId\n      }\n    };\n    console.log(bodyData);\n    //    this.http.post('http://localhost:8083/api/v1/commentaires/creer?idRecette='+ recetteId +'&idPersonne='+ this.userId,bodyData\n    //    ).subscribe((resultData: any)=>\n    // {\n    //       console.log(resultData);\n    //    });\n  }\n\n  goBack() {\n    this.router.navigate(['/recettes']);\n  }\n  getImageUrl(url) {\n    return `../../assets/images/${url}`;\n  }\n  getCreateurRecette(id) {\n    return this.personneService.showOnePerson(id).pipe(map(personne => personne), catchError(error => {\n      console.error(error);\n      return throwError(error);\n    }));\n  }\n  //Posting a comment\n  postComment() {\n    const newComment = {\n      message: this.comment,\n      createurRecette: this.recette?.utilisateurCreateur,\n      proprietaire: {\n        id: 9\n      }\n    };\n    if (this.recette?.id !== undefined) {\n      // Construct the HttpParams with both 'idRecette' and 'idPersonne' parameters\n      const params = new HttpParams().set('idRecette', this.recette.id.toString()).set('idPersonne', newComment.proprietaire?.id?.toString() || '');\n      // Make the HTTP post request with the params containing both parameters\n      this.commentaireService.createComment(newComment, params).subscribe(response => {\n        console.log('New comment has been added successfully', response);\n        alert('New comment created successfully!' + response);\n        this.refreshPage();\n      }, error => {\n        console.log('Error adding the comment', error);\n        alert('Error adding the comment' + error);\n      });\n    }\n  }\n  deleteComment(idComment) {\n    const confirmation = window.confirm('Are you sure you want to delete this comment ?');\n    if (confirmation) {\n      this.commentaireService.deletComment(idComment).subscribe(() => {\n        this.refreshPage();\n      }, error => {\n        console.log(error);\n      });\n    }\n  }\n  calculateTimedifference() {\n    let commentsUpdatedTime = [];\n    if (this.recette.commentaires != null) {\n      commentsUpdatedTime = this.recette.commentaires;\n      let i = 0;\n      for (let comment of commentsUpdatedTime) {\n        let created_at_diff = this.commentaireService.calculateTimeDifference(comment.createdAt);\n        commentsUpdatedTime[i].created_at_diff = created_at_diff;\n        i++;\n      }\n      this.recette.commentaires = commentsUpdatedTime;\n    }\n  }\n  refreshPage() {\n    // Reload the current page to display the updated comments\n    window.location.reload();\n  }\n};\nViewRecetteComponent = __decorate([Component({\n  selector: 'app-view-recette',\n  templateUrl: './view-recette.component.html',\n  styleUrls: ['./view-recette.component.css']\n})], ViewRecetteComponent);","map":{"version":3,"names":["Commentaire","Component","HttpParams","throwError","catchError","map","ViewRecetteComponent","constructor","route","recetteService","router","http","personneService","commentaireService","recette","slideIndex","urlMedia","imgCollection","comment","commentaire","message","ngOnInit","getRecette","getCreateurRecette","idCreateur","calculateTimedifference","scrollDown","detailsSection","document","querySelector","scrollIntoView","behavior","id","Number","snapshot","paramMap","get","getRecetteById","subscribe","data","medias","media","imageObject","image","url","thumbImage","alt","title","push","console","log","error","commentaires","CommentRecipe","recetteId","bodyData","goBack","navigate","getImageUrl","showOnePerson","pipe","personne","postComment","newComment","createurRecette","utilisateurCreateur","proprietaire","undefined","params","set","toString","createComment","response","alert","refreshPage","deleteComment","idComment","confirmation","window","confirm","deletComment","commentsUpdatedTime","i","created_at_diff","calculateTimeDifference","createdAt","location","reload","__decorate","selector","templateUrl","styleUrls"],"sources":["D:\\aFileProjects\\PROJET STAGE\\RecipesManagementSystem-FE\\src\\app\\view-recette\\view-recette.component.ts"],"sourcesContent":["import { UpdateRecetteComponent } from './../update-recette/update-recette.component';\r\nimport { CommentaireService } from './../services/commentaire.service';\r\nimport { Commentaire } from './../models/commentaire';\r\nimport { Personne } from './../models/personne';\r\nimport { PersonneService } from './../services/personne.service';\r\nimport { Component } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { RecetteService } from '../services/recette.service';\r\nimport { Recette } from '../models/recette';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Media } from '../models/media';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { catchError, map } from 'rxjs/operators';\r\n\r\n@Component({\r\n  selector: 'app-view-recette',\r\n  templateUrl: './view-recette.component.html',\r\n  styleUrls: ['./view-recette.component.css'],\r\n})\r\n\r\nexport class ViewRecetteComponent {\r\n  recette: Recette = {} as Recette;\r\n  slideIndex = 1;\r\n  //////slider\r\n  urlMedia: Array<Media[]> = [];\r\n  imgCollection: Array<object> = [];\r\n\r\n  createurRecette?: Personne;\r\n  commentaires?: Commentaire;\r\n  comment: string = '';\r\n\r\n  constructor(\r\n    private route: ActivatedRoute,\r\n    private recetteService: RecetteService,\r\n    private router: Router,\r\n    private http: HttpClient,\r\n    private personneService: PersonneService,\r\n    private commentaireService: CommentaireService,\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.getRecette();\r\n    this.getCreateurRecette(this.recette.idCreateur);\r\n    this.calculateTimedifference();\r\n  }\r\n\r\n  scrollDown() {\r\n    const detailsSection = document.querySelector('#about');\r\n    detailsSection?.scrollIntoView({ behavior: 'smooth' });\r\n  }\r\n\r\n  getRecette(): void {\r\n    const id = Number(this.route.snapshot.paramMap.get('id'));\r\n    this.recetteService.getRecetteById(id).subscribe(\r\n      (data: Recette) => {\r\n        this.recette = data;\r\n        if (this.recette.medias) {\r\n          for (const media of this.recette.medias) {\r\n            const imageObject = {\r\n              image: `assets/images/${media.url}`,\r\n              thumbImage: `assets/images/${media.url}`,\r\n              alt: 'Image 1',\r\n              title: 'Image 1',\r\n            };\r\n            this.imgCollection.push(imageObject);\r\n          }\r\n        }\r\n        console.log(this.imgCollection);\r\n      },\r\n      (error) => {\r\n        console.log(error);\r\n      }\r\n    );\r\n    console.log(this.recette.commentaires);\r\n  }\r\n  //////slider\r\n\r\n  // Commnet Recipe\r\n\r\n  commentaire: Commentaire = new Commentaire();\r\n  message: string = '';\r\n  CommentRecipe(recetteId?: number) {\r\n    let bodyData = {\r\n      message: this.message,\r\n      recette: { id: recetteId },\r\n    };\r\n\r\n    console.log(bodyData);\r\n\r\n    //    this.http.post('http://localhost:8083/api/v1/commentaires/creer?idRecette='+ recetteId +'&idPersonne='+ this.userId,bodyData\r\n    //    ).subscribe((resultData: any)=>\r\n    // {\r\n    //       console.log(resultData);\r\n\r\n    //    });\r\n  }\r\n\r\n  goBack(): void {\r\n    this.router.navigate(['/recettes']);\r\n  }\r\n\r\n  getImageUrl(url: string): string {\r\n    return `../../assets/images/${url}`;\r\n  }\r\n\r\n  getCreateurRecette(id: any): Observable<Personne> {\r\n    return this.personneService.showOnePerson(id).pipe(\r\n      map((personne: Personne) => personne),\r\n      catchError((error) => {\r\n        console.error(error);\r\n        return throwError(error);\r\n      })\r\n    );\r\n  }\r\n\r\n  //Posting a comment\r\n  postComment() {\r\n    const newComment: Commentaire = {\r\n      message: this.comment,\r\n      createurRecette: this.recette?.utilisateurCreateur,\r\n      proprietaire: { id: 9 }\r\n    };\r\n\r\n    if (this.recette?.id !== undefined) {\r\n      // Construct the HttpParams with both 'idRecette' and 'idPersonne' parameters\r\n      const params = new HttpParams()\r\n        .set('idRecette', this.recette.id.toString())\r\n        .set('idPersonne', newComment.proprietaire?.id?.toString() || '');\r\n\r\n      // Make the HTTP post request with the params containing both parameters\r\n      this.commentaireService.createComment(newComment, params).subscribe(\r\n        (response) => {\r\n          console.log('New comment has been added successfully', response);\r\n          alert('New comment created successfully!' + response);\r\n          this.refreshPage();\r\n        },\r\n        (error) => {\r\n          console.log('Error adding the comment', error);\r\n          alert('Error adding the comment' + error);\r\n        }\r\n      );\r\n    }\r\n  }\r\n\r\n  deleteComment(idComment: number): void {\r\n    const confirmation = window.confirm('Are you sure you want to delete this comment ?');\r\n    if (confirmation) {\r\n      this.commentaireService.deletComment(idComment).subscribe(\r\n        () => {\r\n          this.refreshPage();\r\n        },\r\n        error => {\r\n          console.log(error);\r\n        }\r\n      );\r\n    }\r\n  }\r\n\r\n  calculateTimedifference() {\r\n    let commentsUpdatedTime: Commentaire[] = [];\r\n    if (this.recette.commentaires != null) {\r\n      commentsUpdatedTime = this.recette.commentaires;\r\n      let i = 0;\r\n      for (let comment of commentsUpdatedTime) {\r\n        let created_at_diff = this.commentaireService.calculateTimeDifference(comment.createdAt);\r\n        commentsUpdatedTime[i].created_at_diff = created_at_diff;\r\n        i++;\r\n      }\r\n      this.recette.commentaires = commentsUpdatedTime;\r\n    }\r\n  }\r\n\r\n  refreshPage() {\r\n    // Reload the current page to display the updated comments\r\n    window.location.reload();\r\n  }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}