{"ast":null,"code":"import { catchError, tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class AuthService {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.baseUrl = 'http://localhost:8083';\n  }\n  login(user) {\n    return this.http.post(`${this.baseUrl}/api/v1/auth/authenticate`, user, {\n      responseType: 'arraybuffer'\n    }).pipe(tap(response => {\n      // Convert the ArrayBuffer to a string\n      const token = new TextDecoder().decode(response);\n      // Parse the received token as JSON\n      const tokenData = JSON.parse(token);\n      // Store the access token and refresh token in localStorage\n      localStorage.setItem('access_token', tokenData.access_token);\n      localStorage.setItem('refresh_token', tokenData.refresh_token);\n    }), catchError(err => {\n      console.error('Login failed', err);\n      return err; // Return the error for further handling if needed\n    }));\n  }\n\n  register(user) {\n    return this.http.post(`${this.baseUrl}/api/v1/auth/register`, user, {\n      responseType: 'arraybuffer'\n    }).pipe(tap(response => {\n      // Convert the ArrayBuffer to a string\n      const token = new TextDecoder().decode(response);\n      // Parse the received token as JSON\n      const tokenData = JSON.parse(token);\n      // Store the access token and refresh token in localStorage\n      localStorage.setItem('access_token', tokenData.access_token);\n      localStorage.setItem('refresh_token', tokenData.refresh_token);\n    }), catchError(err => {\n      console.error('Registration failed', err);\n      return err; // Return the error for further handling if needed\n    }));\n  }\n  // logout(): Observable<any> {\n  //   const headers = {\n  //     Authorization: `Bearer ${localStorage.getItem('access_token')}`\n  //   };\n  //   const options = {\n  //     headers: new HttpHeaders(headers)  // Pass the headers as an HttpHeaders object\n  //   };\n  //   return this.http.post<any>(`${this.baseUrl}/api/v1/auth/logout`, null, options)\n  //     .pipe(\n  //       tap(() => {\n  //         // Clear tokens from localStorage\n  //         localStorage.removeItem('access_token');\n  //         localStorage.removeItem('refresh_token');\n  //         this.router.navigate(['/login']);\n  //       }),\n  //       catchError(err => {\n  //         console.error('Logout failed', err);\n  //         return err; // Return the error for further handling if needed\n  //       })\n  //     );\n  // }\n  logout() {\n    localStorage.removeItem('access_token');\n    localStorage.removeItem('refresh_token');\n    this.router.navigate(['/login']);\n  }\n  refreshToken() {\n    // Implement token refresh logic using the refresh token\n    // Make a request to your server's refresh token endpoint\n    // and update tokens if the refresh is successful\n    // You should update storeTokens() method accordingly\n    // For example:\n    return this.http.post(`${this.baseUrl}/api/v1/auth/refresh-token`, {\n      refresh_token: localStorage.getItem('refresh_token')\n    }).pipe(tap(newTokens => {\n      this.storeTokens(newTokens);\n    }), catchError(err => {\n      console.error('Token refresh failed', err);\n      return err; // Return the error for further handling if needed\n    }));\n  }\n\n  storeTokens(tokens) {\n    localStorage.setItem('access_token', tokens.access_token);\n    localStorage.setItem('refresh_token', tokens.refresh_token);\n  }\n  isAuthenticated() {\n    const accessToken = localStorage.getItem('access_token');\n    return accessToken !== null; // Return true if there's an access token\n  }\n}\n\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["catchError","tap","AuthService","constructor","http","router","baseUrl","login","user","post","responseType","pipe","response","token","TextDecoder","decode","tokenData","JSON","parse","localStorage","setItem","access_token","refresh_token","err","console","error","register","logout","removeItem","navigate","refreshToken","getItem","newTokens","storeTokens","tokens","isAuthenticated","accessToken","i0","ɵɵinject","i1","HttpClient","i2","Router","factory","ɵfac","providedIn"],"sources":["D:\\aFileProjects\\PROJET STAGE\\RecipesManagementSystem-FE\\src\\app\\services\\auth.service.ts"],"sourcesContent":["import { Router } from '@angular/router';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError, tap } from 'rxjs/operators';\r\nimport { Personne } from '../models/personne';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n  private baseUrl = 'http://localhost:8083';\r\n\r\n  constructor(private http: HttpClient, private router: Router) { }\r\n\r\n  login(user: Personne): Observable<any> {\r\n    return this.http.post(`${this.baseUrl}/api/v1/auth/authenticate`, user, { responseType: 'arraybuffer' })\r\n      .pipe(\r\n        tap(response => {\r\n          // Convert the ArrayBuffer to a string\r\n          const token = new TextDecoder().decode(response);\r\n\r\n          // Parse the received token as JSON\r\n          const tokenData = JSON.parse(token);\r\n\r\n          // Store the access token and refresh token in localStorage\r\n          localStorage.setItem('access_token', tokenData.access_token);\r\n          localStorage.setItem('refresh_token', tokenData.refresh_token);\r\n\r\n        }),\r\n        catchError(err => {\r\n          console.error('Login failed', err);\r\n          return err; // Return the error for further handling if needed\r\n        })\r\n      );\r\n  }\r\n\r\n  register(user: Personne): Observable<any> {\r\n    return this.http.post(`${this.baseUrl}/api/v1/auth/register`, user, { responseType: 'arraybuffer' })\r\n      .pipe(\r\n        tap(response => {\r\n          // Convert the ArrayBuffer to a string\r\n          const token = new TextDecoder().decode(response);\r\n\r\n          // Parse the received token as JSON\r\n          const tokenData = JSON.parse(token);\r\n\r\n          // Store the access token and refresh token in localStorage\r\n          localStorage.setItem('access_token', tokenData.access_token);\r\n          localStorage.setItem('refresh_token', tokenData.refresh_token);\r\n\r\n        }),\r\n        catchError(err => {\r\n          console.error('Registration failed', err);\r\n          return err; // Return the error for further handling if needed\r\n        })\r\n      );\r\n  }\r\n\r\n  // logout(): Observable<any> {\r\n  //   const headers = {\r\n  //     Authorization: `Bearer ${localStorage.getItem('access_token')}`\r\n  //   };\r\n\r\n  //   const options = {\r\n  //     headers: new HttpHeaders(headers)  // Pass the headers as an HttpHeaders object\r\n  //   };\r\n\r\n  //   return this.http.post<any>(`${this.baseUrl}/api/v1/auth/logout`, null, options)\r\n  //     .pipe(\r\n  //       tap(() => {\r\n  //         // Clear tokens from localStorage\r\n  //         localStorage.removeItem('access_token');\r\n  //         localStorage.removeItem('refresh_token');\r\n  //         this.router.navigate(['/login']);\r\n  //       }),\r\n  //       catchError(err => {\r\n  //         console.error('Logout failed', err);\r\n  //         return err; // Return the error for further handling if needed\r\n  //       })\r\n  //     );\r\n  // }\r\n\r\n  logout() {\r\n    localStorage.removeItem('access_token');\r\n    localStorage.removeItem('refresh_token');\r\n    this.router.navigate(['/login']);\r\n  }\r\n\r\n\r\n\r\n\r\n  refreshToken(): Observable<any> {\r\n    // Implement token refresh logic using the refresh token\r\n    // Make a request to your server's refresh token endpoint\r\n    // and update tokens if the refresh is successful\r\n    // You should update storeTokens() method accordingly\r\n\r\n    // For example:\r\n    return this.http.post<any>(`${this.baseUrl}/api/v1/auth/refresh-token`, {\r\n      refresh_token: localStorage.getItem('refresh_token')\r\n    }).pipe(\r\n      tap(newTokens => {\r\n        this.storeTokens(newTokens);\r\n      }),\r\n      catchError(err => {\r\n        console.error('Token refresh failed', err);\r\n        return err; // Return the error for further handling if needed\r\n      })\r\n    );\r\n  }\r\n\r\n  private storeTokens(tokens: any): void {\r\n    localStorage.setItem('access_token', tokens.access_token);\r\n    localStorage.setItem('refresh_token', tokens.refresh_token);\r\n  }\r\n\r\n  isAuthenticated(): boolean {\r\n    const accessToken = localStorage.getItem('access_token');\r\n    return accessToken !== null; // Return true if there's an access token\r\n  }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}