{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./services/auth.service\";\nimport * as i2 from \"@angular/router\";\nexport class AuthClassGuard {\n  constructor(authService, router) {\n    this.authService = authService;\n    this.router = router;\n  }\n  canActivate(route, state) {\n    if (!this.authService.isAuthenticated()) {\n      return this.router.createUrlTree(['/login']);\n    }\n    const requiredRoles = route.data['requiredRoles'];\n    console.log(requiredRoles);\n    if (!requiredRoles || requiredRoles.length === 0) {\n      return true; // Allow access for authenticated users with no specific role requirement\n    }\n\n    if (requiredRoles && requiredRoles.some(role => this.authService.isUserInRole(role))) {\n      return true;\n    } else {\n      return this.router.createUrlTree(['/unauthorized']);\n    }\n  }\n}\nAuthClassGuard.ɵfac = function AuthClassGuard_Factory(t) {\n  return new (t || AuthClassGuard)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router));\n};\nAuthClassGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthClassGuard,\n  factory: AuthClassGuard.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["AuthClassGuard","constructor","authService","router","canActivate","route","state","isAuthenticated","createUrlTree","requiredRoles","data","console","log","length","some","role","isUserInRole","i0","ɵɵinject","i1","AuthService","i2","Router","factory","ɵfac","providedIn"],"sources":["D:\\a-Projects Dev\\PROJET STAGE\\RecipesManagementSystem-FE\\src\\app\\auth-class.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, UrlTree, Router } from '@angular/router';\r\nimport { Observable } from 'rxjs';\r\nimport { AuthService } from './services/auth.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthClassGuard implements CanActivate {\r\n  constructor(private authService: AuthService, private router: Router) {}\r\n\r\n  canActivate(\r\n    route: ActivatedRouteSnapshot,\r\n    state: RouterStateSnapshot\r\n  ): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\r\n    if (!this.authService.isAuthenticated()) {\r\n      return this.router.createUrlTree(['/login']);\r\n    }\r\n\r\n    const requiredRoles = route.data['requiredRoles'] as string[];\r\n    console.log(requiredRoles);\r\n\r\n    if (!requiredRoles || requiredRoles.length === 0) {\r\n      return true; // Allow access for authenticated users with no specific role requirement\r\n    }\r\n\r\n    if (requiredRoles && requiredRoles.some(role => this.authService.isUserInRole(role))) {\r\n      return true;\r\n    } else {\r\n      return this.router.createUrlTree(['/unauthorized']);\r\n    }\r\n  }\r\n}\r\n"],"mappings":";;;AAQA,OAAM,MAAOA,cAAc;EACzBC,YAAoBC,WAAwB,EAAUC,MAAc;IAAhD,KAAAD,WAAW,GAAXA,WAAW;IAAuB,KAAAC,MAAM,GAANA,MAAM;EAAW;EAEvEC,WAAWA,CACTC,KAA6B,EAC7BC,KAA0B;IAE1B,IAAI,CAAC,IAAI,CAACJ,WAAW,CAACK,eAAe,EAAE,EAAE;MACvC,OAAO,IAAI,CAACJ,MAAM,CAACK,aAAa,CAAC,CAAC,QAAQ,CAAC,CAAC;;IAG9C,MAAMC,aAAa,GAAGJ,KAAK,CAACK,IAAI,CAAC,eAAe,CAAa;IAC7DC,OAAO,CAACC,GAAG,CAACH,aAAa,CAAC;IAE1B,IAAI,CAACA,aAAa,IAAIA,aAAa,CAACI,MAAM,KAAK,CAAC,EAAE;MAChD,OAAO,IAAI,CAAC,CAAC;;;IAGf,IAAIJ,aAAa,IAAIA,aAAa,CAACK,IAAI,CAACC,IAAI,IAAI,IAAI,CAACb,WAAW,CAACc,YAAY,CAACD,IAAI,CAAC,CAAC,EAAE;MACpF,OAAO,IAAI;KACZ,MAAM;MACL,OAAO,IAAI,CAACZ,MAAM,CAACK,aAAa,CAAC,CAAC,eAAe,CAAC,CAAC;;EAEvD;;AAvBWR,cAAc,C;mBAAdA,cAAc,EAAAiB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,WAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,MAAA;AAAA;AAAdtB,cAAc,C;SAAdA,cAAc;EAAAuB,OAAA,EAAdvB,cAAc,CAAAwB,IAAA;EAAAC,UAAA,EAFb;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}